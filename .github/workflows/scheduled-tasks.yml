name: Scheduled Maintenance

on:
  schedule:
    - cron: '0 2 * * *'
  workflow_dispatch: {}
  workflow_call:
    secrets: {}

permissions:
  contents: read
  issues: write
  pull-requests: read

jobs:
  maintenance:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Node setup
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install link checker
        run: |
          npm install -g markdown-link-check@3 || true

      - name: Verify Markdown links (non-fatal)
        run: |
          find . -name "*.md" -type f | while read f; do
            echo "Checking $f"
            markdown-link-check -q -c '{"ignorePatterns":[{"pattern":"^mailto:"}]}' "$f" || echo "Link issues found in $f"
          done || true

      - name: Find and report stale branches
        uses: actions/github-script@v7
        continue-on-error: true
        id: find_stale
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { repo, owner } = context;
            console.log(`ðŸ“‹ Checking branches in ${owner}/${repo}`);
            
            try {
              const { data: branches } = await github.rest.repos.listBranches({
                owner,
                repo,
                per_page: 100,
              });
              
              console.log(`Found ${branches.length} branches`);
              const now = Date.now();
              const stale = [];
              
              for (const b of branches) {
                try {
                  const { data: commit } = await github.rest.repos.getCommit({
                    owner,
                    repo,
                    ref: b.commit.sha,
                  });
                  
                  const commitDate = new Date(commit.commit.author.date);
                  const ageDays = Math.floor((now - commitDate.getTime()) / (1000 * 60 * 60 * 24));
                  
                  if (ageDays > 90 && !b.protected) {
                    stale.push({ name: b.name, ageDays });
                    console.log(`Found stale branch: ${b.name} (${ageDays} days old)`);
                  }
                } catch (err) {
                  console.log(`Warning: Could not check branch ${b.name}: ${err.message}`);
                }
              }
              
              console.log(`Total stale branches: ${stale.length}`);
              core.setOutput('stale_branches', JSON.stringify(stale));
              core.setOutput('stale_count', stale.length.toString());
            } catch (error) {
              console.error('Error listing branches:', error.message);
              core.setOutput('stale_branches', '[]');
              core.setOutput('stale_count', '0');
            }

      - name: Create maintenance report
        uses: actions/github-script@v7
        continue-on-error: true
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { repo, owner } = context;
            const staleInput = '${{ steps.find_stale.outputs.stale_branches }}' || '[]';
            let stale = [];
            
            try {
              stale = JSON.parse(staleInput);
            } catch (e) {
              console.log('Could not parse stale branches, continuing with empty list');
              stale = [];
            }
            
            const now = new Date();
            const reportDate = now.toISOString().split('T')[0];
            const lines = [
              `# ðŸ”§ Maintenance Report - ${reportDate}`,
              '',
              `Repository: **${owner}/${repo}**`,
              `Generated: ${now.toISOString()}`,
              '',
              '## Stale Branches (>90 days old)',
              stale.length === 0 
                ? 'âœ… No stale branches found' 
                : stale.map(s => `- \`${s.name}\` (${s.ageDays} days)`).join('\n'),
              '',
              '---',
              '*This is an automated maintenance report*'
            ];
            
            try {
              await github.rest.issues.create({
                owner,
                repo,
                title: `ðŸ“‹ Maintenance report - ${reportDate}`,
                body: lines.join('\n'),
                labels: ['automation', 'maintenance']
              });
              console.log('âœ… Maintenance report created');
            } catch (error) {
              console.log(`Note: Could not create issue (may already exist): ${error.message}`);
            }

      - name: Cleanup and summary
        if: always()
        run: |
          echo "âœ… Maintenance job completed"
          echo "Total stale branches found: ${{ steps.find_stale.outputs.stale_count }}"
