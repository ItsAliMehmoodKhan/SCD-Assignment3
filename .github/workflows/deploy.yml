name: Deploy to GitHub Pages

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      targetRef:
        description: 'Branch or tag to deploy'
        required: false
        default: ''

defaults:
  run:
    working-directory: heavens-above

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: pages-deploy
  cancel-in-progress: false

jobs:
  build:
    name: Build artifact
    runs-on: ubuntu-latest
    timeout-minutes: 20
    outputs:
      artifact-name: ${{ steps.upload.outputs.artifact-id }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.targetRef || github.ref }}

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm

      - name: Install dependencies
        run: |
          npm ci || npm install

      - name: Run tests (if configured)
        run: |
          npm test --if-present

      - name: Build (if configured)
        run: |
          npm run build --if-present

      - name: Prepare static site directory
        run: |
          mkdir -p ./public
          if [ -d "public" ]; then echo "public exists"; fi
          # If build outputs to dist/build, copy to public
          if [ -d "dist" ]; then cp -r dist/* public/; fi
          if [ -d "build" ]; then cp -r build/* public/; fi
          # Ensure index.html exists for Pages
          if [ ! -f "public/index.html" ] && [ -f "public/download.html" ]; then cp public/download.html public/index.html; fi

      - name: Upload artifact
        id: upload
        uses: actions/upload-pages-artifact@v3
        with:
          path: heavens-above/public

  integration-tests:
    name: Integration tests
    runs-on: ubuntu-latest
    needs: build
    timeout-minutes: 10
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Basic link check (public)
        run: |
          if [ -d "public" ]; then
            if command -v npx >/dev/null 2>&1; then
              npx -y broken-link-checker http://localhost:8080 --filter-level 3 || true
            else
              echo "npx not available, skipping link check"; fi
          else
            echo "No public directory in repo; relying on build output only"; fi

  deploy:
    name: Deploy to Pages
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: [build]
    if: ${{ needs.build.result == 'success' }}
    timeout-minutes: 15
    steps:
      - name: Configure Pages
        uses: actions/configure-pages@v5
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  notify:
    name: Notify outcome
    runs-on: ubuntu-latest
    needs: [deploy]
    if: always()
    steps:
      - name: Notification summary
        uses: actions/github-script@v7
        with:
          script: |
            const outcome = '${{ needs.deploy.result }}';
            const msg = outcome === 'success' ? '✅ Deployment succeeded' : `❌ Deployment ${outcome}`;
            core.summary.addHeading('Deployment Result');
            core.summary.addRaw(msg);
            await core.summary.write();

